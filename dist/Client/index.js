"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = require("qs");
const RPCError_1 = require("./Errors/RPCError");
const ErrorResponse_1 = require("./Abstracts/ErrorResponse");
class Client {
    constructor(config) {
        config = {
            headers: {
                'Content-Type': 'application/json'
            },
            ...config,
            ...{ paramsSerializer: qs_1.stringify }
        };
        if (config.baseURL) {
            let parsedUrl = new URL(config.baseURL);
            if (parsedUrl.username) {
                let credentials = {
                    username: parsedUrl.username,
                    password: parsedUrl.password,
                };
                delete parsedUrl.username;
                delete parsedUrl.password;
                config['auth'] = credentials;
                config['baseURL'] = parsedUrl.href;
            }
        }
        this.axios = axios_1.default.create(config);
    }
    mappingResponse(res, multiple = false) {
        console.log(res);
        if (res instanceof Array) {
            return res.map((item) => {
                return this.mappingResponse(item, true);
            });
        }
        if (res.error) {
            if (!multiple) {
                throw new RPCError_1.RPCError(res.error, res.error.message || 'RPC Error', res.error.code || -32003);
            }
            else {
                return new ErrorResponse_1.ErrorResponse(res.error);
            }
        }
        return res.result;
    }
    ;
    async request(url, params) {
        return this.axios
            .post(url, params || this.defaultParams, {})
            .then(response => (response ? response.data : response))
            .catch((err) => {
            if (err.response && err.response.data) {
                return this.mappingResponse(err.response.data);
            }
            throw err;
        });
    }
    rpc(...args) {
        let data = args.flat(Infinity)
            .map((item, i) => {
            return {
                id: ++i,
                jsonrpc: '2.0',
                ...item,
            };
        });
        if (data.length === 1) {
            data = data[0];
        }
        return this
            .request('', data)
            .then(this.mappingResponse.bind(this))
            .then((data) => data);
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ2xpZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQTBGO0FBQzFGLDJCQUFpRDtBQUNqRCxnREFBMkM7QUFHM0MsNkRBQXdEO0FBTXhELE1BQWEsTUFBTTtJQUlmLFlBQVksTUFBcUI7UUFDN0IsTUFBTSxHQUFHO1lBQ0wsT0FBTyxFQUFFO2dCQUNMLGNBQWMsRUFBRSxrQkFBa0I7YUFDckM7WUFDRCxHQUFHLE1BQU07WUFDVCxHQUFHLEVBQUMsZ0JBQWdCLEVBQWhCLGNBQWdCLEVBQUM7U0FDeEIsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO2dCQUNwQixJQUFJLFdBQVcsR0FBRztvQkFDZCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7b0JBQzVCLFFBQVEsRUFBRSxTQUFTLENBQUMsUUFBUTtpQkFDL0IsQ0FBQztnQkFDRixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7Z0JBQzFCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7YUFDdEM7U0FDSjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBR0QsZUFBZSxDQUFDLEdBQWdCLEVBQUUsV0FBb0IsS0FBSztRQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtZQUN0QixPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFtQixFQUFFLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUF5QixDQUFDO1NBQzlCO1FBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDWCxNQUFNLElBQUksbUJBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLFdBQVcsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzdGO2lCQUFNO2dCQUNILE9BQU8sSUFBSSw2QkFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN2QztTQUNKO1FBQ0QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3RCLENBQUM7SUFBQSxDQUFDO0lBR0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTTtRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ1osSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7YUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3ZELEtBQUssQ0FBQyxDQUFDLEdBQWUsRUFBRSxFQUFFO1lBQ3ZCLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDbkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEQ7WUFDRCxNQUFNLEdBQUcsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUtELEdBQUcsQ0FBSSxHQUFHLElBQXVDO1FBQzdDLElBQUksSUFBSSxHQUFvQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUMxRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDYixPQUFPO2dCQUNILEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ1AsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsR0FBRyxJQUFJO2FBQ1YsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRVAsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuQixJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxJQUFJO2FBQ04sT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7YUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNKO0FBbEZELHdCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBeGlvcywge0F4aW9zRXJyb3IsIEF4aW9zSW5zdGFuY2UsIEF4aW9zUmVxdWVzdENvbmZpZywgQXhpb3NSZXNwb25zZX0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge3N0cmluZ2lmeSBhcyBwYXJhbXNTZXJpYWxpemVyfSBmcm9tICdxcyc7XG5pbXBvcnQge1JQQ0Vycm9yfSBmcm9tIFwiLi9FcnJvcnMvUlBDRXJyb3JcIjtcbmltcG9ydCB7UlBDfSBmcm9tIFwiLi4vQHR5cGVzL3R5cGVzXCI7XG5pbXBvcnQgUmVzcG9uc2UgPSBSUEMuUmVzcG9uc2U7XG5pbXBvcnQge0Vycm9yUmVzcG9uc2V9IGZyb20gXCIuL0Fic3RyYWN0cy9FcnJvclJlc3BvbnNlXCI7XG5cbmV4cG9ydCB0eXBlIENsaWVudE9wdGlvbnMgPSBBeGlvc1JlcXVlc3RDb25maWc7XG5cbnR5cGUgcnBjUmV0dXJuVHlwZSA9IFJlc3BvbnNlIHwgRXJyb3IgO1xuXG5leHBvcnQgY2xhc3MgQ2xpZW50IHtcbiAgICBheGlvczogQXhpb3NJbnN0YW5jZTtcbiAgICBkZWZhdWx0UGFyYW1zOiBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xpZW50T3B0aW9ucykge1xuICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgIC4uLntwYXJhbXNTZXJpYWxpemVyfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWcuYmFzZVVSTCkge1xuICAgICAgICAgICAgbGV0IHBhcnNlZFVybCA9IG5ldyBVUkwoY29uZmlnLmJhc2VVUkwpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZFVybC51c2VybmFtZSkge1xuICAgICAgICAgICAgICAgIGxldCBjcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHBhcnNlZFVybC51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhcnNlZFVybC5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJzZWRVcmwudXNlcm5hbWU7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcnNlZFVybC5wYXNzd29yZDtcbiAgICAgICAgICAgICAgICBjb25maWdbJ2F1dGgnXSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGNvbmZpZ1snYmFzZVVSTCddID0gcGFyc2VkVXJsLmhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5heGlvcyA9IEF4aW9zLmNyZWF0ZShjb25maWcpO1xuICAgIH1cblxuXG4gICAgbWFwcGluZ1Jlc3BvbnNlKHJlczogYW55IHwgYW55W10sIG11bHRpcGxlOiBib29sZWFuID0gZmFsc2UpOiBycGNSZXR1cm5UeXBlIHwgcnBjUmV0dXJuVHlwZVtdIHwgRXJyb3JSZXNwb25zZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5tYXAoKGl0ZW06IEF4aW9zUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBwaW5nUmVzcG9uc2UoaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KSBhcyBSZXNwb25zZVtdIHwgRXJyb3JbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzLmVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJQQ0Vycm9yKHJlcy5lcnJvciwgcmVzLmVycm9yLm1lc3NhZ2UgfHwgJ1JQQyBFcnJvcicsIHJlcy5lcnJvci5jb2RlIHx8IC0zMjAwMyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShyZXMuZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMucmVzdWx0O1xuICAgIH07XG5cblxuICAgIGFzeW5jIHJlcXVlc3QodXJsLCBwYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2UgfCBBeGlvc1Jlc3BvbnNlW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXhpb3NcbiAgICAgICAgICAgIC5wb3N0KHVybCwgcGFyYW1zIHx8IHRoaXMuZGVmYXVsdFBhcmFtcywge30pXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiAocmVzcG9uc2UgPyByZXNwb25zZS5kYXRhIDogcmVzcG9uc2UpKVxuICAgICAgICAgICAgLmNhdGNoKChlcnI6IEF4aW9zRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlICYmIGVyci5yZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcHBpbmdSZXNwb25zZShlcnIucmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJwYzxUPihhcmdzOiBSUEMuSVBheWxvYWQpOiBQcm9taXNlPFQ+O1xuICAgIHJwYzxUPihhcmcxOiBSUEMuSVBheWxvYWQsIC4uLmFyZ3M6IFJQQy5JUGF5bG9hZFtdKTogUHJvbWlzZTxUW10+O1xuICAgIHJwYzxUPihhcmdzOiBSUEMuSVBheWxvYWRbXSk6IFByb21pc2U8VD47XG4gICAgcnBjPFQ+KC4uLmFyZ3M6IChSUEMuSVBheWxvYWQgfCBSUEMuSVBheWxvYWRbXSlbXSk6IFByb21pc2U8VD4ge1xuICAgICAgICBsZXQgZGF0YTogKFJQQy5JUGF5bG9hZCB8IFJQQy5JUGF5bG9hZFtdKSA9IGFyZ3MuZmxhdChJbmZpbml0eSlcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogKytpLFxuICAgICAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAucmVxdWVzdCgnJywgZGF0YSlcbiAgICAgICAgICAgIC50aGVuKHRoaXMubWFwcGluZ1Jlc3BvbnNlLmJpbmQodGhpcykpXG4gICAgICAgICAgICAudGhlbigoZGF0YTogYW55KSA9PiBkYXRhKTtcbiAgICB9XG59Il19