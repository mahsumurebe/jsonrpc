"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = require("qs");
const RPCError_1 = require("./Errors/RPCError");
const Response_1 = require("./Abstracts/Response");
const ErrorResponse_1 = require("./Abstracts/ErrorResponse");
exports.ErrorResponse = ErrorResponse_1.ErrorResponse;
class Client {
    constructor(config) {
        config = {
            headers: {
                'Content-Type': 'application/json'
            },
            ...config,
            ...{ paramsSerializer: qs_1.stringify }
        };
        if (config.baseURL) {
            let parsedUrl = new URL(config.baseURL);
            if (parsedUrl.username) {
                let credentials = {
                    username: parsedUrl.username,
                    password: parsedUrl.password,
                };
                delete parsedUrl.username;
                delete parsedUrl.password;
                config['auth'] = credentials;
                config['baseURL'] = parsedUrl.href;
            }
        }
        this.axios = axios_1.default.create(config);
    }
    mapResponse(response, multiple) {
        if (response instanceof Array) {
            return response.map((item) => {
                return this.mapResponse(item, true);
            });
        }
        else {
            if (response.error) {
                if (multiple) {
                    throw new ErrorResponse_1.ErrorResponse(response.error);
                }
                else {
                    throw new RPCError_1.RPCError(response.error, response.error.message || 'RPC Error', response.error.code || -32003);
                }
            }
            else {
                if (multiple) {
                    let result = new Response_1.Response();
                    result.code = response.code;
                    result.id = response.id;
                    result.jsonrpc = response.jsonrpc;
                    result.result = response.result;
                    return result;
                }
                else {
                    return response.result;
                }
            }
        }
    }
    async request(url, params) {
        return this.axios
            .post(url, params || this.defaultParams, {})
            .then(response => (response ? response.data : response))
            .catch((err) => {
            if (err.response && err.response.data) {
                return this.mapResponse(err.response.data);
            }
            throw err;
        });
    }
    rpc(...args) {
        let data = args.flat(Infinity)
            .map((item, i) => {
            return {
                id: ++i,
                jsonrpc: '2.0',
                ...item,
            };
        });
        if (data.length === 1 && !(args[0] instanceof Array || args.length > 1)) {
            data = data[0];
        }
        return this
            .request('', data)
            .then(data => {
            return this.mapResponse(data);
        })
            .then((data) => data);
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ2xpZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQTBGO0FBQzFGLDJCQUFpRDtBQUNqRCxnREFBMkM7QUFDM0MsbURBQThDO0FBQzlDLDZEQUF3RDtBQU9oRCx3QkFQQSw2QkFBYSxDQU9BO0FBRXJCLE1BQWEsTUFBTTtJQUlmLFlBQVksTUFBcUI7UUFDN0IsTUFBTSxHQUFHO1lBQ0wsT0FBTyxFQUFFO2dCQUNMLGNBQWMsRUFBRSxrQkFBa0I7YUFDckM7WUFDRCxHQUFHLE1BQU07WUFDVCxHQUFHLEVBQUMsZ0JBQWdCLEVBQWhCLGNBQWdCLEVBQUM7U0FDeEIsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO2dCQUNwQixJQUFJLFdBQVcsR0FBRztvQkFDZCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7b0JBQzVCLFFBQVEsRUFBRSxTQUFTLENBQUMsUUFBUTtpQkFDL0IsQ0FBQztnQkFDRixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7Z0JBQzFCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7YUFDdEM7U0FDSjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBSUQsV0FBVyxDQUFJLFFBQXVDLEVBQUUsUUFBa0I7UUFDdEUsSUFBSSxRQUFRLFlBQVksS0FBSyxFQUFFO1lBQzNCLE9BQU8sUUFBUSxDQUFD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QUE5RkQsd0JBOEZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF4aW9zLCB7QXhpb3NFcnJvciwgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXF1ZXN0Q29uZmlnLCBBeGlvc1Jlc3BvbnNlfSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7c3RyaW5naWZ5IGFzIHBhcmFtc1NlcmlhbGl6ZXJ9IGZyb20gJ3FzJztcbmltcG9ydCB7UlBDRXJyb3J9IGZyb20gXCIuL0Vycm9ycy9SUENFcnJvclwiO1xuaW1wb3J0IHtSZXNwb25zZX0gZnJvbSBcIi4vQWJzdHJhY3RzL1Jlc3BvbnNlXCI7XG5pbXBvcnQge0Vycm9yUmVzcG9uc2V9IGZyb20gXCIuL0Fic3RyYWN0cy9FcnJvclJlc3BvbnNlXCI7XG5pbXBvcnQge1JQQ30gZnJvbSBcIi4uL0B0eXBlcy90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBDbGllbnRPcHRpb25zID0gQXhpb3NSZXF1ZXN0Q29uZmlnO1xuXG50eXBlIFRNYXBSZXNvdXJjZSA9IFJQQy5SZXNwb25zZS5JRGF0YTtcbnR5cGUgVE1hcFJldHVyblR5cGU8VD4gPSBSZXNwb25zZTxUPiB8IEVycm9yUmVzcG9uc2U7XG5leHBvcnQge0Vycm9yUmVzcG9uc2V9O1xuXG5leHBvcnQgY2xhc3MgQ2xpZW50IHtcbiAgICBheGlvczogQXhpb3NJbnN0YW5jZTtcbiAgICBkZWZhdWx0UGFyYW1zOiBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ2xpZW50T3B0aW9ucykge1xuICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgIC4uLntwYXJhbXNTZXJpYWxpemVyfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWcuYmFzZVVSTCkge1xuICAgICAgICAgICAgbGV0IHBhcnNlZFVybCA9IG5ldyBVUkwoY29uZmlnLmJhc2VVUkwpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZFVybC51c2VybmFtZSkge1xuICAgICAgICAgICAgICAgIGxldCBjcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHBhcnNlZFVybC51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhcnNlZFVybC5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJzZWRVcmwudXNlcm5hbWU7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcnNlZFVybC5wYXNzd29yZDtcbiAgICAgICAgICAgICAgICBjb25maWdbJ2F1dGgnXSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGNvbmZpZ1snYmFzZVVSTCddID0gcGFyc2VkVXJsLmhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5heGlvcyA9IEF4aW9zLmNyZWF0ZShjb25maWcpO1xuICAgIH1cblxuICAgIG1hcFJlc3BvbnNlPFQ+KHJlc3BvbnNlOiBUTWFwUmVzb3VyY2VbXSwgbXVsdGlwbGU/OiBib29sZWFuKTogVE1hcFJldHVyblR5cGU8VD5bXTtcbiAgICBtYXBSZXNwb25zZTxUPihyZXNwb25zZTogVE1hcFJlc291cmNlLCBtdWx0aXBsZT86IGJvb2xlYW4pOiBUTWFwUmV0dXJuVHlwZTxUPjtcbiAgICBtYXBSZXNwb25zZTxUPihyZXNwb25zZTogVE1hcFJlc291cmNlIHwgVE1hcFJlc291cmNlW10sIG11bHRpcGxlPzogYm9vbGVhbik6IFRNYXBSZXR1cm5UeXBlPFQ+IHwgVE1hcFJldHVyblR5cGU8VD5bXSB7XG4gICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKChpdGVtOiBUTWFwUmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBSZXNwb25zZTxUPihpdGVtLCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvclJlc3BvbnNlKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUlBDRXJyb3IocmVzcG9uc2UuZXJyb3IsIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgfHwgJ1JQQyBFcnJvcicsIHJlc3BvbnNlLmVycm9yLmNvZGUgfHwgLTMyMDAzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFJlc3BvbnNlPFQ+KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jb2RlID0gcmVzcG9uc2UuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5qc29ucnBjID0gcmVzcG9uc2UuanNvbnJwYztcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHJlcXVlc3QodXJsLCBwYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2UgfCBBeGlvc1Jlc3BvbnNlW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXhpb3NcbiAgICAgICAgICAgIC5wb3N0KHVybCwgcGFyYW1zIHx8IHRoaXMuZGVmYXVsdFBhcmFtcywge30pXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiAocmVzcG9uc2UgPyByZXNwb25zZS5kYXRhIDogcmVzcG9uc2UpKVxuICAgICAgICAgICAgLmNhdGNoKChlcnI6IEF4aW9zRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlICYmIGVyci5yZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcFJlc3BvbnNlKGVyci5yZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcnBjPFQ+KGFyZ3M6IFJQQy5JUGF5bG9hZCk6IFByb21pc2U8VD47XG4gICAgcnBjPFQ+KGFyZzE6IFJQQy5JUGF5bG9hZCwgLi4uYXJnczogUlBDLklQYXlsb2FkW10pOiBQcm9taXNlPFRNYXBSZXR1cm5UeXBlPFQ+W10+O1xuICAgIHJwYzxUPihhcmdzOiBSUEMuSVBheWxvYWRbXSk6IFByb21pc2U8VE1hcFJldHVyblR5cGU8VD5bXT47XG4gICAgcnBjPFQ+KC4uLmFyZ3M6IChSUEMuSVBheWxvYWQgfCBSUEMuSVBheWxvYWRbXSlbXSk6IFByb21pc2U8VD4ge1xuICAgICAgICBsZXQgZGF0YTogKFJQQy5JUGF5bG9hZCB8IFJQQy5JUGF5bG9hZFtdKSA9IGFyZ3MuZmxhdChJbmZpbml0eSlcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogKytpLFxuICAgICAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmICEoYXJnc1swXSBpbnN0YW5jZW9mIEFycmF5IHx8IGFyZ3MubGVuZ3RoID4gMSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIC5yZXF1ZXN0KCcnLCBkYXRhKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwUmVzcG9uc2U8VD4oZGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChkYXRhOiBhbnkpID0+IGRhdGEpO1xuICAgIH1cbn1cbiJdfQ==