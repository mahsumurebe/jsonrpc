"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Routes_1 = require("./Library/Routes");
const ParseError_1 = require("./Errors/ParseError");
const events_1 = require("events");
const InvalidParams_1 = require("./Errors/InvalidParams");
const Output_1 = require("./Library/Output");
exports.Output = Output_1.Output;
const bodyParser = require("body-parser");
class Server extends events_1.EventEmitter {
    constructor() {
        super();
        this.handle = express_1.default();
        this.routes = new Routes_1.Routes();
    }
    init() {
        let app = this.handle;
        app.set('trust proxy', true);
        //region Middlewares
        //For request emitter
        app.use(bodyParser.urlencoded({ extended: false }));
        app.use(bodyParser.json());
        // Error catch for bodyParser
        app.use((err, req, res, next) => {
            if (err instanceof SyntaxError) {
                next(new ParseError_1.ParseError());
            }
            else {
                next(err, req, res);
            }
        });
        //Parsing body
        app.use((req, res, next) => {
            if (!req.body) {
                return next(new InvalidParams_1.InvalidParams({
                    message: 'Request body not found.'
                }));
            }
            if ('object' !== typeof req.body || !('string' === typeof req.body.method && req.body.id && req.body.id)) {
                return next(new InvalidParams_1.InvalidParams({
                    message: 'Invalid JSON-RPC Request Body'
                }));
            }
            next();
        });
        //endregion
        app.use((req, res, next) => {
            this.emit('request', req.body, req, res);
            next();
        });
        app.use((err, req, res, next) => {
            let output = Output_1.Output.generate(err, req.body || {}, res);
            res
                .send(output)
                .end();
            this.emit('error', err, req, res);
        });
        app.post('/?$', (req, res) => {
            this.emit('routing', req, res);
            Promise
                .resolve(null)
                .then(() => {
                let body = req.body;
                return this.routes.call(body.method, body.params, req, res);
            })
                .then((result) => {
                //On success
                let output = Output_1.Output.generate(result, req.body || {}, res);
                this.emit('response', output);
                res
                    .send(output)
                    .end();
            }, (e) => {
                //On error
                let output = Output_1.Output.generate(e, req.body || {}, res);
                res
                    .send(output)
                    .end();
                this.emit('error', e, req, res);
            });
        });
        app.get('/?$', (req, res) => {
            throw new ParseError_1.ParseError();
        });
    }
    listen(port, host) {
        return new Promise((succ, err) => {
            return this.listener = this.handle.listen(port, host, () => {
                let address = this.listener.address();
                this.emit('ready', address);
                //TODO: Teyfik'e sor
                succ(this.listener);
            }).on('error', err);
        });
    }
}
exports.Server = Server;
//# sourceMappingURL=data:application/json;base64,