"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../../..");
class Routes {
    constructor() {
        this._routes = {};
    }
    add(method, callback, params) {
        this._routes[method] = {
            callback: callback,
            params: params
        };
        return this;
    }
    has(method) {
        return !!this._routes[method];
    }
    list() {
        return this._routes;
    }
    async call(method, params, req, res) {
        if (!this._routes[method]) {
            throw new __1.MethodNotFound();
        }
        const route = this._routes[method];
        const invalidParams = [];
        for (const check of route.params || []) {
            if (!!check.required && !params[check.name]) {
                invalidParams.push({
                    message: check.name + ' field required.',
                    code: -1
                });
            }
            //TODO: Check type
        }
        if (invalidParams.length > 0) {
            throw new __1.InvalidParams(invalidParams);
        }
        try {
            return route.callback.apply(this._routes[method], [params || {}, req, res]);
        }
        catch (e) {
            if (e instanceof __1.ServerError) {
                throw e;
            }
            else {
                throw new __1.InternalError(e);
            }
        }
    }
}
exports.Routes = Routes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvU2VydmVyL0xpYnJhcnkvUm91dGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsZ0NBQXdGO0FBYXhGLE1BQWEsTUFBTTtJQUFuQjtRQUNJLFlBQU8sR0FBZSxFQUFFLENBQUM7SUFtRDdCLENBQUM7SUFqREcsR0FBRyxDQUFDLE1BQWMsRUFBRSxRQUF1QixFQUFFLE1BQThCO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDbkIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxHQUFHLENBQUMsTUFBYztRQUNkLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUk7UUFDQSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYyxFQUFFLE1BQVcsRUFBRSxHQUFZLEVBQUUsR0FBYTtRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksa0JBQWMsRUFBRSxDQUFDO1NBQzlCO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQyxNQUFNLGFBQWEsR0FBaUIsRUFBRSxDQUFDO1FBRXZDLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3pDLGFBQWEsQ0FBQyxJQUFJLENBQUM7b0JBQ2YsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUcsa0JBQWtCO29CQUN4QyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUNYLENBQUMsQ0FBQzthQUNOO1lBQ0Qsa0JBQWtCO1NBQ3JCO1FBRUQsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksaUJBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMxQztRQUVELElBQUk7WUFDQSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBUSxDQUFDO1NBQ3RGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsWUFBWSxlQUFXLEVBQUU7Z0JBQzFCLE1BQU0sQ0FBQyxDQUFDO2FBQ1g7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLGlCQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7U0FDSjtJQUNMLENBQUM7Q0FDSjtBQXBERCx3QkFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JlcXVlc3QsIFJlc3BvbnNlfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHtJbnRlcm5hbEVycm9yLCBJbnZhbGlkUGFyYW1zLCBNZXRob2ROb3RGb3VuZCwgUlBDLCBTZXJ2ZXJFcnJvcn0gZnJvbSBcIi4uLy4uLy4uXCI7XG5pbXBvcnQgSUVycm9yRGF0YSA9IFJQQy5SZXNwb25zZS5JRXJyb3JEYXRhO1xuXG50eXBlIFJvdXRlQ2FsbGJhY2sgPSAoYm9keT86IGFueSwgcmVxPzogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpID0+IGFueTtcbnR5cGUgUm91dGVDYWxsYmFja1BhcmFtcyA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgdmFsaWRhdGU/OiAodmFsdWU6IHN0cmluZykgPT4gYm9vbGVhbjtcbn1cblxudHlwZSBSb3V0ZXJMaXN0ID0geyBba2V5OiBzdHJpbmddOiB7IGNhbGxiYWNrOiBSb3V0ZUNhbGxiYWNrLCBwYXJhbXM6IFJvdXRlQ2FsbGJhY2tQYXJhbXNbXSB9IH07XG5cbmV4cG9ydCBjbGFzcyBSb3V0ZXMge1xuICAgIF9yb3V0ZXM6IFJvdXRlckxpc3QgPSB7fTtcblxuICAgIGFkZChtZXRob2Q6IHN0cmluZywgY2FsbGJhY2s6IFJvdXRlQ2FsbGJhY2ssIHBhcmFtcz86IFJvdXRlQ2FsbGJhY2tQYXJhbXNbXSk6IHRoaXMge1xuICAgICAgICB0aGlzLl9yb3V0ZXNbbWV0aG9kXSA9IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGhhcyhtZXRob2Q6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9yb3V0ZXNbbWV0aG9kXTtcbiAgICB9XG5cbiAgICBsaXN0KCk6IFJvdXRlckxpc3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm91dGVzO1xuICAgIH1cblxuICAgIGFzeW5jIGNhbGwobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogYW55LCByZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBpZiAoIXRoaXMuX3JvdXRlc1ttZXRob2RdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWV0aG9kTm90Rm91bmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvdXRlID0gdGhpcy5fcm91dGVzW21ldGhvZF07XG5cbiAgICAgICAgY29uc3QgaW52YWxpZFBhcmFtczogSUVycm9yRGF0YVtdID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiByb3V0ZS5wYXJhbXMgfHwgW10pIHtcbiAgICAgICAgICAgIGlmICghIWNoZWNrLnJlcXVpcmVkICYmICFwYXJhbXNbY2hlY2submFtZV0pIHtcbiAgICAgICAgICAgICAgICBpbnZhbGlkUGFyYW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5uYW1lICsgJyBmaWVsZCByZXF1aXJlZC4nLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAtMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9UT0RPOiBDaGVjayB0eXBlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW52YWxpZFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtcyhpbnZhbGlkUGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gcm91dGUuY2FsbGJhY2suYXBwbHkodGhpcy5fcm91dGVzW21ldGhvZF0sIFtwYXJhbXMgfHwge30sIHJlcSwgcmVzXSkgYXMgYW55O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFNlcnZlckVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludGVybmFsRXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=