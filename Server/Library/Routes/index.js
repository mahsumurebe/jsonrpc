"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../../..");
class Routes {
    constructor() {
        this._routes = {};
    }
    add(method, callback, params) {
        this._routes[method] = {
            callback: callback,
            params: params
        };
        return this;
    }
    has(method) {
        return !!this._routes[method];
    }
    list() {
        return this._routes;
    }
    async call(method, params, req, res) {
        if (!this._routes[method]) {
            throw new __1.MethodNotFound();
        }
        const route = this._routes[method];
        const invalidParams = [];
        for (const check of route.params || []) {
            if (!!check.required) {
                if (!(check.name in params) || params[check.name] === null || typeof params[check.name] === 'undefined') {
                    invalidParams.push({
                        message: check.name + ' field required.',
                        code: -1
                    });
                }
            }
            //TODO: Check type
        }
        if (invalidParams.length > 0) {
            throw new __1.InvalidParams(invalidParams);
        }
        try {
            return route.callback.apply(this._routes[method], [params || {}, req, res]);
        }
        catch (e) {
            if (e instanceof __1.ServerError) {
                throw e;
            }
            else {
                throw new __1.InternalError(e);
            }
        }
    }
}
exports.Routes = Routes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvU2VydmVyL0xpYnJhcnkvUm91dGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsZ0NBQXdGO0FBYXhGLE1BQWEsTUFBTTtJQUFuQjtRQUNJLFlBQU8sR0FBZSxFQUFFLENBQUM7SUFxRDdCLENBQUM7SUFuREcsR0FBRyxDQUFDLE1BQWMsRUFBRSxRQUF1QixFQUFFLE1BQThCO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDbkIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxHQUFHLENBQUMsTUFBYztRQUNkLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUk7UUFDQSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYyxFQUFFLE1BQVcsRUFBRSxHQUFZLEVBQUUsR0FBYTtRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksa0JBQWMsRUFBRSxDQUFDO1NBQzlCO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQyxNQUFNLGFBQWEsR0FBaUIsRUFBRSxDQUFDO1FBRXZDLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssV0FBVyxFQUFFO29CQUNyRyxhQUFhLENBQUMsSUFBSSxDQUFDO3dCQUNmLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxHQUFHLGtCQUFrQjt3QkFDeEMsSUFBSSxFQUFFLENBQUMsQ0FBQztxQkFDWCxDQUFDLENBQUM7aUJBQ047YUFDSjtZQUNELGtCQUFrQjtTQUNyQjtRQUVELElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLGlCQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUM7UUFFRCxJQUFJO1lBQ0EsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQVEsQ0FBQztTQUN0RjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsSUFBSSxDQUFDLFlBQVksZUFBVyxFQUFFO2dCQUMxQixNQUFNLENBQUMsQ0FBQzthQUNYO2lCQUFNO2dCQUNILE1BQU0sSUFBSSxpQkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlCO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7QUF0REQsd0JBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXF1ZXN0LCBSZXNwb25zZX0gZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCB7SW50ZXJuYWxFcnJvciwgSW52YWxpZFBhcmFtcywgTWV0aG9kTm90Rm91bmQsIFJQQywgU2VydmVyRXJyb3J9IGZyb20gXCIuLi8uLi8uLlwiO1xuaW1wb3J0IElFcnJvckRhdGEgPSBSUEMuUmVzcG9uc2UuSUVycm9yRGF0YTtcblxudHlwZSBSb3V0ZUNhbGxiYWNrID0gKGJvZHk/OiBhbnksIHJlcT86IFJlcXVlc3QsIHJlcz86IFJlc3BvbnNlKSA9PiBhbnk7XG50eXBlIFJvdXRlQ2FsbGJhY2tQYXJhbXMgPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB0eXBlPzogc3RyaW5nO1xuICAgIHZhbGlkYXRlPzogKHZhbHVlOiBzdHJpbmcpID0+IGJvb2xlYW47XG59XG5cbnR5cGUgUm91dGVyTGlzdCA9IHsgW2tleTogc3RyaW5nXTogeyBjYWxsYmFjazogUm91dGVDYWxsYmFjaywgcGFyYW1zOiBSb3V0ZUNhbGxiYWNrUGFyYW1zW10gfSB9O1xuXG5leHBvcnQgY2xhc3MgUm91dGVzIHtcbiAgICBfcm91dGVzOiBSb3V0ZXJMaXN0ID0ge307XG5cbiAgICBhZGQobWV0aG9kOiBzdHJpbmcsIGNhbGxiYWNrOiBSb3V0ZUNhbGxiYWNrLCBwYXJhbXM/OiBSb3V0ZUNhbGxiYWNrUGFyYW1zW10pOiB0aGlzIHtcbiAgICAgICAgdGhpcy5fcm91dGVzW21ldGhvZF0gPSB7XG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBoYXMobWV0aG9kOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fcm91dGVzW21ldGhvZF07XG4gICAgfVxuXG4gICAgbGlzdCgpOiBSb3V0ZXJMaXN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvdXRlcztcbiAgICB9XG5cbiAgICBhc3luYyBjYWxsKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IGFueSwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9yb3V0ZXNbbWV0aG9kXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGhvZE5vdEZvdW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb3V0ZSA9IHRoaXMuX3JvdXRlc1ttZXRob2RdO1xuXG4gICAgICAgIGNvbnN0IGludmFsaWRQYXJhbXM6IElFcnJvckRhdGFbXSA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2Ygcm91dGUucGFyYW1zIHx8IFtdKSB7XG4gICAgICAgICAgICBpZiAoISFjaGVjay5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIGlmICghKGNoZWNrLm5hbWUgaW4gcGFyYW1zKSB8fCBwYXJhbXNbY2hlY2submFtZV0gPT09IG51bGwgfHwgdHlwZW9mIHBhcmFtc1tjaGVjay5uYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZFBhcmFtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm5hbWUgKyAnIGZpZWxkIHJlcXVpcmVkLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAtMVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1RPRE86IENoZWNrIHR5cGVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnZhbGlkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1zKGludmFsaWRQYXJhbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiByb3V0ZS5jYWxsYmFjay5hcHBseSh0aGlzLl9yb3V0ZXNbbWV0aG9kXSwgW3BhcmFtcyB8fCB7fSwgcmVxLCByZXNdKSBhcyBhbnk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgU2VydmVyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW50ZXJuYWxFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==