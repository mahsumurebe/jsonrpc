"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Routes_1 = require("./Library/Routes");
const __1 = require("..");
const events_1 = require("events");
const Output_1 = require("./Library/Output");
exports.Output = Output_1.Output;
const bodyParser = require("body-parser");
class Server extends events_1.EventEmitter {
    //endregion
    constructor() {
        super();
        this.handle = express_1.default();
        this.routes = new Routes_1.Routes();
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    init() {
        let app = this.handle;
        app.set('trust proxy', true);
        //region Middlewares
        //For request emitter
        app.use(bodyParser.urlencoded({ extended: false }));
        app.use(bodyParser.json());
        // Error catch for bodyParser
        app.use((err, req, res, next) => {
            if (err instanceof SyntaxError) {
                next(new __1.ParseError());
            }
            else {
                next(err, req, res);
            }
        });
        //Parsing body
        app.use((req, res, next) => {
            if (!req.body) {
                return next(new __1.InvalidParams({
                    message: 'Request body not found.'
                }));
            }
            const checkParams = (req) => {
                return 'object' !== typeof req.body || !('string' === typeof req.body.method && req.body.id && req.body.id);
            };
            const throwIt = () => {
                return next(new __1.InvalidParams({
                    message: 'Invalid JSON-RPC Request Body'
                }));
            };
            if (req.body instanceof Array) {
                for (const item of req.body) {
                    if (!checkParams(item)) {
                        return throwIt();
                    }
                }
            }
            else {
                if (!checkParams(req.body)) {
                    return throwIt();
                }
            }
            next();
        });
        //endregion
        app.use((req, res, next) => {
            this.emit('request', req.body, req, res);
            next();
        });
        app.use((err, req, res, next) => {
            let output = Output_1.Output.generate(err, req.body || {});
            res
                .send(output)
                .end();
            this.emit('error', err, req.body, req, res);
        });
        app.post('/?$', (req, res) => {
            this.emit('routing', req);
            let body = req.body;
            if (body instanceof Array) {
                return Promise.all(body
                    .map(bodyItem => this
                    .routes
                    .call(bodyItem.method, bodyItem.params, req, res)
                    .then(data => {
                    return Output_1.Output.generate(data, bodyItem);
                })
                    .catch(e => {
                    return Output_1.Output.generate(e, bodyItem);
                })))
                    .then(data => {
                    this.emit('response', data, req, res);
                    res.send(data)
                        .end();
                });
            }
            return this
                .routes
                .call(body.method, body.params, req, res)
                .then(data => {
                //On success
                let output = Output_1.Output.generate(data, req.body);
                this.emit('response', output, req, res);
                res.send(output)
                    .end();
            })
                .catch(e => {
                //On error
                let output = Output_1.Output.generate(e, req.body);
                res.send(output)
                    .end();
                this.emit('error', e, req.body, req, res);
            });
        });
        app.get('/?$', () => {
            throw new __1.ParseError(undefined, 'JSONRPC server handles only POST requests');
        });
    }
    listen(port, host) {
        return new Promise((succ, err) => {
            return this.listener = this.handle.listen(port, host, () => {
                this.emit('ready', this.listener.address());
                succ(this.listener);
            }).on('error', err);
        });
    }
    close() {
        return new Promise((resolve, reject) => {
            this.listener.close(err => {
                if (!!err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.Server = Server;
//# sourceMappingURL=data:application/json;base64,