"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Routes_1 = require("./Library/Routes");
const __1 = require("..");
const events_1 = require("events");
const __2 = require("..");
const Output_1 = require("./Library/Output");
exports.Output = Output_1.Output;
const bodyParser = require("body-parser");
class Server extends events_1.EventEmitter {
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    //endregion
    constructor() {
        super();
        this.handle = express_1.default();
        this.routes = new Routes_1.Routes();
    }
    init() {
        let app = this.handle;
        app.set('trust proxy', true);
        //region Middlewares
        //For request emitter
        app.use(bodyParser.urlencoded({ extended: false }));
        app.use(bodyParser.json());
        // Error catch for bodyParser
        app.use((err, req, res, next) => {
            if (err instanceof SyntaxError) {
                next(new __1.ParseError());
            }
            else {
                next(err, req, res);
            }
        });
        //Parsing body
        app.use((req, res, next) => {
            if (!req.body) {
                return next(new __2.InvalidParams({
                    message: 'Request body not found.'
                }));
            }
            if ('object' !== typeof req.body || !('string' === typeof req.body.method && req.body.id && req.body.id)) {
                return next(new __2.InvalidParams({
                    message: 'Invalid JSON-RPC Request Body'
                }));
            }
            next();
        });
        //endregion
        app.use((req, res, next) => {
            this.emit('request', req.body, req, res);
            next();
        });
        app.use((err, req, res, next) => {
            let output = Output_1.Output.generate(err, req.body || {}, res);
            res
                .send(output)
                .end();
            this.emit('error', err, req.body, req, res);
        });
        app.post('/?$', (req, res) => {
            this.emit('routing', req);
            Promise
                .resolve(null)
                .then(() => {
                let body = req.body;
                return this.routes.call(body.method, body.params, req, res);
            })
                .then((result) => {
                //On success
                let output = Output_1.Output.generate(result, req.body || {}, res);
                this.emit('response', output);
                res
                    .send(output)
                    .end();
            }, (e) => {
                //On error
                let output = Output_1.Output.generate(e, req.body || {}, res);
                res
                    .send(output)
                    .end();
                this.emit('error', e, req.body, req, res);
            });
        });
        app.get('/?$', () => {
            throw new __1.ParseError();
        });
    }
    listen(port, host) {
        return new Promise((succ, err) => {
            return this.listener = this.handle.listen(port, host, () => {
                this.emit('ready', this.listener.address());
                succ(this.listener);
            }).on('error', err);
        });
    }
    close() {
        return new Promise((resolve, reject) => {
            this.listener.close(err => {
                if (!!err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.Server = Server;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvU2VydmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQTREO0FBQzVELDZDQUF3QztBQUN4QywwQkFBOEI7QUFDOUIsbUNBQW9DO0FBRXBDLDBCQUFzQztBQUN0Qyw2Q0FBd0M7QUFJaEMsaUJBSkEsZUFBTSxDQUlBO0FBRmQsMENBQTJDO0FBSTNDLE1BQWEsTUFBTyxTQUFRLHFCQUFZO0lBNkJwQyxFQUFFLENBQUMsS0FBYSxFQUFFLFFBQTJCO1FBQ3pDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUEwQkQsSUFBSSxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQUk7UUFDdkIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxXQUFXO0lBRVg7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsaUJBQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSTtRQUNBLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0Isb0JBQW9CO1FBRXBCLHFCQUFxQjtRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFM0IsNkJBQTZCO1FBQzdCLEdB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LElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNmO3FCQUFNO29CQUNILE9BQU8sRUFBRSxDQUFDO2lCQUNiO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXRLRCx3QkFzS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcywge0V4cHJlc3MsIFJlcXVlc3QsIFJlc3BvbnNlfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHtSb3V0ZXN9IGZyb20gXCIuL0xpYnJhcnkvUm91dGVzXCI7XG5pbXBvcnQge1BhcnNlRXJyb3J9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcbmltcG9ydCB7SW52YWxpZFBhcmFtcywgUlBDfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7T3V0cHV0fSBmcm9tIFwiLi9MaWJyYXJ5L091dHB1dFwiO1xuaW1wb3J0IHtBZGRyZXNzSW5mb30gZnJvbSBcIm5ldFwiO1xuaW1wb3J0IGJvZHlQYXJzZXIgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7XG5cbmV4cG9ydCB7T3V0cHV0fTtcblxuZXhwb3J0IGNsYXNzIFNlcnZlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgaGFuZGxlOiBFeHByZXNzO1xuICAgIGxpc3RlbmVyOiBodHRwLlNlcnZlcjtcbiAgICByb3V0ZXM6IFJvdXRlcztcblxuICAgIC8vcmVnaW9uIE9uXG5cbiAgICBvbihldmVudDogJ3JlYWR5JywgY2FsbGJhY2s6IChwb3J0OiBudW1iZXIsIGhvc3RuYW1lOiBzdHJpbmcsIGJhY2tsb2c6IG51bWJlciwgY2FsbGJhY2s/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHZvaWQpOiB0aGlzO1xuXG4gICAgb24oZXZlbnQ6ICdyZWFkeScsIGNhbGxiYWNrOiAocG9ydDogbnVtYmVyLCBob3N0bmFtZTogc3RyaW5nLCBjYWxsYmFjaz86ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCkgPT4gdm9pZCk6IHRoaXM7XG5cbiAgICBvbihldmVudDogJ3Jlc3BvbnNlJywgY2FsbGJhY2s6IChvdXRwdXQ6IFJQQy5SZXNwb25zZS5JRGF0YSwgcmVxPzogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzO1xuXG4gICAgb24oZXZlbnQ6ICdyZXF1ZXN0JywgY2FsbGJhY2s6IChib2R5OiBSUEMuUmVxdWVzdC5JRGF0YSwgcmVxPzogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzO1xuXG4gICAgb24oZXZlbnQ6ICdyZWFkeScsIGNhbGxiYWNrOiAocG9ydDogbnVtYmVyLCBjYWxsYmFjaz86ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCkgPT4gdm9pZCk6IHRoaXM7XG5cbiAgICBvbihldmVudDogJ3JlYWR5JywgY2FsbGJhY2s6IChwYXRoOiBzdHJpbmcsIGNhbGxiYWNrPzogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSA9PiB2b2lkKTogdGhpcztcblxuICAgIG9uKGV2ZW50OiAncmVhZHknLCBjYWxsYmFjazogKGhhbmRsZTogYW55LCBsaXN0ZW5pbmdMaXN0ZW5lcj86ICgpID0+IHZvaWQpID0+IHZvaWQpOiB0aGlzO1xuXG4gICAgb24oZXZlbnQ6ICdyZWFkeScsIGNhbGxiYWNrOiAoYWRkcmVzczogQWRkcmVzc0luZm8gfCBzdHJpbmcgfCBudWxsKSA9PiB2b2lkKTogdGhpcztcblxuICAgIG9uKGV2ZW50OiAncmVhZHknLCBjYWxsYmFjazogKGNhbGxiYWNrPzogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSA9PiB2b2lkKTogdGhpcztcblxuICAgIG9uKGV2ZW50OiAncm91dGluZycsIGNhbGxiYWNrOiAocmVxOiBSZXF1ZXN0KSA9PiB2b2lkKTogdGhpcztcblxuICAgIG9uKGV2ZW50OiAnZXJyb3InLCBjYWxsYmFjazogKGU6IEVycm9yLCBib2R5PzogYW55LCByZXE/OiBSZXF1ZXN0LCByZXM/OiBSZXNwb25zZSkgPT4gdm9pZCk6IHRoaXM7XG5cbiAgICBvbihldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogKC4uLmFyZ3MpID0+IHZvaWQpOiB0aGlzIHtcbiAgICAgICAgc3VwZXIub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIEVtaXRzXG5cbiAgICBlbWl0KGV2ZW50OiAncmVhZHknLCBwb3J0OiBudW1iZXIsIGhvc3RuYW1lOiBzdHJpbmcsIGJhY2tsb2c6IG51bWJlciwgY2FsbGJhY2s/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogJ3JlYWR5JywgcG9ydDogbnVtYmVyLCBob3N0bmFtZTogc3RyaW5nLCBjYWxsYmFjaz86ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IGJvb2xlYW47XG5cbiAgICBlbWl0KGV2ZW50OiAncmVzcG9uc2UnLCBvdXRwdXQ6IFJQQy5SZXNwb25zZS5JRGF0YSwgcmVxPzogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogJ2Vycm9yJywgZTogRXJyb3IsIGJvZHk/OiBhbnksIHJlcT86IFJlcXVlc3QsIHJlcz86IFJlc3BvbnNlKTogYm9vbGVhbjtcblxuICAgIGVtaXQoZXZlbnQ6ICdyZWFkeScsIHBvcnQ6IG51bWJlciwgY2FsbGJhY2s/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogJ3JlYWR5JywgcGF0aDogc3RyaW5nLCBjYWxsYmFjaz86ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IGJvb2xlYW47XG5cbiAgICBlbWl0KGV2ZW50OiAncmVhZHknLCBoYW5kbGU6IGFueSwgbGlzdGVuaW5nTGlzdGVuZXI/OiAoKSA9PiB2b2lkKTogYm9vbGVhbjtcblxuICAgIGVtaXQoZXZlbnQ6ICdyZXF1ZXN0JywgYm9keTogYW55LCByZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogJ3JlYWR5JywgY2FsbGJhY2s/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogJ3JvdXRpbmcnLCByZXE6IFJlcXVlc3QpOiBib29sZWFuO1xuXG4gICAgZW1pdChldmVudDogc3RyaW5nLCAuLi5hcmdzKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBzdXBlci5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlID0gZXhwcmVzcygpO1xuICAgICAgICB0aGlzLnJvdXRlcyA9IG5ldyBSb3V0ZXMoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBsZXQgYXBwID0gdGhpcy5oYW5kbGU7XG4gICAgICAgIGFwcC5zZXQoJ3RydXN0IHByb3h5JywgdHJ1ZSk7XG5cbiAgICAgICAgLy9yZWdpb24gTWlkZGxld2FyZXNcblxuICAgICAgICAvL0ZvciByZXF1ZXN0IGVtaXR0ZXJcbiAgICAgICAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiBmYWxzZX0pKTtcbiAgICAgICAgYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbiAgICAgICAgLy8gRXJyb3IgY2F0Y2ggZm9yIGJvZHlQYXJzZXJcbiAgICAgICAgYXBwLnVzZSgoZXJyLCByZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7XG4gICAgICAgICAgICAgICAgbmV4dChuZXcgUGFyc2VFcnJvcigpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dChlcnIsIHJlcSwgcmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9QYXJzaW5nIGJvZHlcbiAgICAgICAgYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVxLmJvZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChuZXcgSW52YWxpZFBhcmFtcyh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSZXF1ZXN0IGJvZHkgbm90IGZvdW5kLidcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ29iamVjdCcgIT09IHR5cGVvZiByZXEuYm9keSB8fCAhKCdzdHJpbmcnID09PSB0eXBlb2YgcmVxLmJvZHkubWV0aG9kICYmIHJlcS5ib2R5LmlkICYmIHJlcS5ib2R5LmlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KG5ldyBJbnZhbGlkUGFyYW1zKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgSlNPTi1SUEMgUmVxdWVzdCBCb2R5J1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vZW5kcmVnaW9uXG5cbiAgICAgICAgYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVxdWVzdCcsIHJlcS5ib2R5LCByZXEsIHJlcyk7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAudXNlKChlcnIsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gT3V0cHV0LmdlbmVyYXRlKGVyciwgcmVxLmJvZHkgfHwge30sIHJlcyk7XG4gICAgICAgICAgICByZXNcbiAgICAgICAgICAgICAgICAuc2VuZChvdXRwdXQpXG4gICAgICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyciwgcmVxLmJvZHksIHJlcSwgcmVzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLnBvc3QoJy8/JCcsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdyb3V0aW5nJywgcmVxKTtcbiAgICAgICAgICAgIFByb21pc2VcbiAgICAgICAgICAgICAgICAucmVzb2x2ZShudWxsKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHk6IFJQQy5SZXF1ZXN0LklEYXRhID0gcmVxLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvdXRlcy5jYWxsKGJvZHkubWV0aG9kLCBib2R5LnBhcmFtcywgcmVxLCByZXMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL09uIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9IE91dHB1dC5nZW5lcmF0ZShyZXN1bHQsIHJlcS5ib2R5IHx8IHt9LCByZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3Jlc3BvbnNlJywgb3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZChvdXRwdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgICAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy9PbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gT3V0cHV0LmdlbmVyYXRlKGUsIHJlcS5ib2R5IHx8IHt9LCByZXMpO1xuICAgICAgICAgICAgICAgICAgICByZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKG91dHB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUsIHJlcS5ib2R5LCByZXEsIHJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAuZ2V0KCcvPyQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsaXN0ZW4ocG9ydDogbnVtYmVyLCBob3N0Pzogc3RyaW5nKTogUHJvbWlzZTxodHRwLlNlcnZlcj4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHN1Y2MsIGVycikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIgPSB0aGlzLmhhbmRsZS5saXN0ZW4ocG9ydCwgaG9zdCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmVhZHknLCB0aGlzLmxpc3RlbmVyLmFkZHJlc3MoKSk7XG4gICAgICAgICAgICAgICAgc3VjYyh0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pLm9uKCdlcnJvcicsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5jbG9zZShlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==