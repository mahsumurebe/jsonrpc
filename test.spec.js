"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
process.on('unhandledRejection', console.error);
const Server_1 = require("./Server");
const Client_1 = require("./Client");
const InternalError_1 = require("./Errors/InternalError");
const InvalidParams_1 = require("./Errors/InvalidParams");
const assert = require('assert');
const port = 9102;
let server;
let client;
describe('Testing', () => {
    it('Create server instance and listen', (done) => {
        server = new Server_1.Server();
        server.init();
        server.routes.add('test', (body) => {
            return body;
        });
        server.routes.add('errorMethod', () => {
            throw new Error('Is this internal error ?');
        });
        server.routes.add('paramError', () => void 0, [
            {
                name: 'param1',
                required: true
            }
        ]);
        server.on('error', err => {
            // Disable console logging error
        });
        let errListener = err => done(err);
        server.once('ready', () => {
            server.off('error', errListener);
            done();
        });
        server.once('error', errListener);
        server.listen(port);
    });
    it('Client should connect to server', done => {
        client = new Client_1.Client({
            baseURL: 'http://127.0.0.1:' + port,
            proxy: {
                host: '127.0.0.1',
                port: 8888
            }
        });
        done();
    });
    it('Should get [1, 2, 3] value', done => {
        let params = [1, 2, 3];
        client.rpc({
            method: 'test',
            params
        }).then(data => {
            assert.deepStrictEqual(data, params);
            done();
        }).catch(err => done(err));
    });
    it('Should get InternalError error', done => {
        client.rpc({ method: 'errorMethod' }).then(() => {
            done('Method did not return an error.');
        }).catch(err => {
            if (err instanceof InternalError_1.InternalError) {
                done();
            }
            else if (err instanceof Error) {
                done('Error method InternalError did not return the error class.');
            }
            else {
                done('The error method did not return an error message.');
            }
        });
    });
    it('Should get InvalidParams error', done => {
        client.rpc({ method: 'paramError' }).then(() => {
            done('Method did not return an error.');
        }).catch(err => {
            if (err instanceof InvalidParams_1.InvalidParams) {
                done();
            }
            else if (err instanceof Error) {
                done('Error method InvalidParams did not return the error class.');
            }
            else {
                done('The error method did not return an error message.');
            }
        });
    });
    it('Close serving', done => {
        server.close().then(() => {
            done();
        }).catch(err => done(err));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rlc3Quc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFxQztBQUNyQyxPQUFPLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxxQ0FBZ0M7QUFDaEMscUNBQWdDO0FBQ2hDLDBEQUFxRDtBQUNyRCwwREFBcUQ7QUFFckQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztBQUNsQixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLE1BQWMsQ0FBQztBQUVuQixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUNyQixFQUFFLENBQUMsbUNBQW1DLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM3QyxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFDO2dCQUNJLElBQUksRUFBRSxRQUFRO2dCQUNkLFFBQVEsRUFBRSxJQUFJO2FBQ2pCO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FB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QUFDO0lBQ0gsRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRTtRQUN2QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNyQixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBjb25zb2xlLmVycm9yKTtcbmltcG9ydCB7U2VydmVyfSBmcm9tIFwiLi9TZXJ2ZXJcIjtcbmltcG9ydCB7Q2xpZW50fSBmcm9tIFwiLi9DbGllbnRcIjtcbmltcG9ydCB7SW50ZXJuYWxFcnJvcn0gZnJvbSBcIi4vRXJyb3JzL0ludGVybmFsRXJyb3JcIjtcbmltcG9ydCB7SW52YWxpZFBhcmFtc30gZnJvbSBcIi4vRXJyb3JzL0ludmFsaWRQYXJhbXNcIjtcblxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBwb3J0ID0gOTEwMjtcbmxldCBzZXJ2ZXI6IFNlcnZlcjtcbmxldCBjbGllbnQ6IENsaWVudDtcblxuZGVzY3JpYmUoJ1Rlc3RpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ0NyZWF0ZSBzZXJ2ZXIgaW5zdGFuY2UgYW5kIGxpc3RlbicsIChkb25lKSA9PiB7XG4gICAgICAgIHNlcnZlciA9IG5ldyBTZXJ2ZXIoKTtcbiAgICAgICAgc2VydmVyLmluaXQoKTtcbiAgICAgICAgc2VydmVyLnJvdXRlcy5hZGQoJ3Rlc3QnLCAoYm9keSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXJ2ZXIucm91dGVzLmFkZCgnZXJyb3JNZXRob2QnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lzIHRoaXMgaW50ZXJuYWwgZXJyb3IgPycpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VydmVyLnJvdXRlcy5hZGQoJ3BhcmFtRXJyb3InLCAoKSA9PiB2b2lkIDAsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncGFyYW0xJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICAgICAgc2VydmVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICAvLyBEaXNhYmxlIGNvbnNvbGUgbG9nZ2luZyBlcnJvclxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGVyckxpc3RlbmVyID0gZXJyID0+IGRvbmUoZXJyKTtcbiAgICAgICAgc2VydmVyLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgICAgICAgc2VydmVyLm9mZignZXJyb3InLCBlcnJMaXN0ZW5lcik7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXJ2ZXIub25jZSgnZXJyb3InLCBlcnJMaXN0ZW5lcik7XG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCk7XG4gICAgfSk7XG4gICAgaXQoJ0NsaWVudCBzaG91bGQgY29ubmVjdCB0byBzZXJ2ZXInLCBkb25lID0+IHtcbiAgICAgICAgY2xpZW50ID0gbmV3IENsaWVudCh7XG4gICAgICAgICAgICBiYXNlVVJMOiAnaHR0cDovLzEyNy4wLjAuMTonICsgcG9ydCxcbiAgICAgICAgICAgIHByb3h5OiB7XG4gICAgICAgICAgICAgICAgaG9zdDogJzEyNy4wLjAuMScsXG4gICAgICAgICAgICAgICAgcG9ydDogODg4OFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICAgIGl0KCdTaG91bGQgZ2V0IFsxLCAyLCAzXSB2YWx1ZScsIGRvbmUgPT4ge1xuICAgICAgICBsZXQgcGFyYW1zID0gWzEsIDIsIDNdO1xuICAgICAgICBjbGllbnQucnBjKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ3Rlc3QnLFxuICAgICAgICAgICAgcGFyYW1zXG4gICAgICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGRhdGEsIHBhcmFtcyk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiBkb25lKGVycikpO1xuICAgIH0pO1xuICAgIGl0KCdTaG91bGQgZ2V0IEludGVybmFsRXJyb3IgZXJyb3InLCBkb25lID0+IHtcbiAgICAgICAgY2xpZW50LnJwYyh7bWV0aG9kOiAnZXJyb3JNZXRob2QnfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBkb25lKCdNZXRob2QgZGlkIG5vdCByZXR1cm4gYW4gZXJyb3IuJyk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSW50ZXJuYWxFcnJvcikge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkb25lKCdFcnJvciBtZXRob2QgSW50ZXJuYWxFcnJvciBkaWQgbm90IHJldHVybiB0aGUgZXJyb3IgY2xhc3MuJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvbmUoJ1RoZSBlcnJvciBtZXRob2QgZGlkIG5vdCByZXR1cm4gYW4gZXJyb3IgbWVzc2FnZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ1Nob3VsZCBnZXQgSW52YWxpZFBhcmFtcyBlcnJvcicsIGRvbmUgPT4ge1xuICAgICAgICBjbGllbnQucnBjKHttZXRob2Q6ICdwYXJhbUVycm9yJ30pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZG9uZSgnTWV0aG9kIGRpZCBub3QgcmV0dXJuIGFuIGVycm9yLicpO1xuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEludmFsaWRQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgZG9uZSgnRXJyb3IgbWV0aG9kIEludmFsaWRQYXJhbXMgZGlkIG5vdCByZXR1cm4gdGhlIGVycm9yIGNsYXNzLicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKCdUaGUgZXJyb3IgbWV0aG9kIGRpZCBub3QgcmV0dXJuIGFuIGVycm9yIG1lc3NhZ2UuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdDbG9zZSBzZXJ2aW5nJywgZG9uZSA9PiB7XG4gICAgICAgIHNlcnZlci5jbG9zZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KS5jYXRjaChlcnIgPT4gZG9uZShlcnIpKTtcbiAgICB9KTtcbn0pO1xuIl19