"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = require("qs");
const Response_1 = require("./Abstracts/Response");
const ErrorResponse_1 = require("./Abstracts/ErrorResponse");
exports.ErrorResponse = ErrorResponse_1.ErrorResponse;
const __1 = require("..");
class Client {
    constructor(config) {
        config = {
            headers: {
                'Content-Type': 'application/json'
            },
            ...config,
            ...{ paramsSerializer: qs_1.stringify }
        };
        if (config.baseURL) {
            let parsedUrl = new URL(config.baseURL);
            if (parsedUrl.username) {
                let credentials = {
                    username: parsedUrl.username,
                    password: parsedUrl.password,
                };
                delete parsedUrl.username;
                delete parsedUrl.password;
                config['auth'] = credentials;
                config['baseURL'] = parsedUrl.href;
            }
        }
        this.axios = axios_1.default.create(config);
    }
    mapResponse(response, multiple) {
        if (response instanceof Array) {
            return response.map((item) => {
                return this.mapResponse(item, true);
            });
        }
        else {
            if (!!response.error) {
                if (multiple) {
                    throw new ErrorResponse_1.ErrorResponse(response.error);
                }
                else {
                    // @ts-ignore
                    let data = response.data || response.error.data || null;
                    let errC;
                    switch (response.error.code || -32603) {
                        case -32603:
                            errC = __1.InternalError;
                            break;
                        case -32602:
                            errC = __1.InvalidParams;
                            break;
                        case -32600:
                            errC = __1.InvalidRequest;
                            break;
                        case -32601:
                            errC = __1.MethodNotFound;
                            break;
                        case -32700:
                            errC = __1.ParseError;
                            break;
                        default:
                            errC = __1.ServerError;
                            break;
                    }
                    throw new errC(data, response.error.message || 'Internal error', response.error.code || -32603);
                }
            }
            else {
                if (multiple) {
                    let result = new Response_1.Response();
                    result.code = response.code || undefined;
                    result.id = response.id || undefined;
                    result.jsonrpc = response.jsonrpc || undefined;
                    result.result = response.result || response;
                    return result;
                }
                else {
                    if (!response.result) {
                        throw new __1.ParseError(response);
                    }
                    return response.result;
                }
            }
        }
    }
    async request(url, params) {
        return this.axios
            .post(url, params || this.defaultParams, {})
            .then(response => (response ? response.data : response))
            .catch((err) => {
            if (err.response && err.response.data) {
                return this.mapResponse(err.response.data);
            }
            throw err;
        });
    }
    rpc(...args) {
        let data = args.flat(Infinity)
            .map((item, i) => {
            return {
                id: ++i,
                jsonrpc: '2.0',
                params: {},
                ...item,
            };
        });
        if (data.length === 1 && !(args[0] instanceof Array || args.length > 1)) {
            data = data[0];
        }
        return this
            .request('', data)
            .then(data => {
            return this.mapResponse(data);
        })
            .then((data) => data);
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,