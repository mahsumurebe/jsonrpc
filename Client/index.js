"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const qs_1 = require("qs");
const Response_1 = require("./Abstracts/Response");
const ErrorResponse_1 = require("./Abstracts/ErrorResponse");
exports.ErrorResponse = ErrorResponse_1.ErrorResponse;
const __1 = require("..");
class Client {
    constructor(config) {
        this.defaultParams = {};
        this.permanentArguments = [];
        config = {
            headers: {
                'Content-Type': 'application/json'
            },
            ...config,
            ...{ paramsSerializer: qs_1.stringify }
        };
        if (config.baseURL) {
            let parsedUrl = new URL(config.baseURL);
            if (parsedUrl.username) {
                let credentials = {
                    username: parsedUrl.username,
                    password: parsedUrl.password,
                };
                delete parsedUrl.username;
                delete parsedUrl.password;
                config['auth'] = credentials;
                config['baseURL'] = parsedUrl.href;
            }
        }
        this.axios = axios_1.default.create(config);
    }
    baseErrorHandler(response, multiple) {
        if (!!response.error) {
            if (multiple) {
                return new ErrorResponse_1.ErrorResponse(response.error);
            }
            else {
                // @ts-ignore
                let data = response.data || response.error.data || null;
                let errC;
                switch (response.error.code || -32603) {
                    case -32603:
                        errC = __1.InternalError;
                        break;
                    case -32602:
                        errC = __1.InvalidParams;
                        break;
                    case -32600:
                        errC = __1.InvalidRequest;
                        break;
                    case -32601:
                        errC = __1.MethodNotFound;
                        break;
                    case -32700:
                        errC = __1.ParseError;
                        break;
                    default:
                        errC = __1.ServerError;
                        break;
                }
                throw new errC(data, response.error.message || 'Internal error', response.error.code || -32603);
            }
        }
    }
    errorHandler(response, multiple) {
        return this.baseErrorHandler(response, multiple);
    }
    mapResponse(response, multiple) {
        if (response instanceof Array) {
            return response.map((item) => {
                return this.mapResponse(item, true);
            });
        }
        else {
            const errorHandle = this.errorHandler(response, multiple);
            if (errorHandle) {
                return errorHandle;
            }
            else {
                if (multiple) {
                    let result = new Response_1.Response();
                    result.code = response.code || undefined;
                    result.id = response.id || undefined;
                    result.jsonrpc = response.jsonrpc || undefined;
                    result.result = response.result || response;
                    return result;
                }
                else {
                    if (typeof response !== 'object' || !('result' in response)) {
                        throw new __1.ParseError(response);
                    }
                    return response.result;
                }
            }
        }
    }
    async request(url, params) {
        return this.axios
            .post(url, params, {})
            .then(response => (response ? response.data : response))
            .catch((err) => {
            if (err.response && err.response.data) {
                return this.mapResponse(err.response.data);
            }
            throw err;
        });
    }
    rpc(...args) {
        let data = args.flat(Infinity)
            .map((item, i) => {
            const data = {
                id: ++i,
                jsonrpc: '2.0',
                params: this.defaultParams,
                ...item,
            };
            data.params = this.reduceParams(data.params) || this.defaultParams;
            return data;
        });
        if (data.length === 1 && !(args[0] instanceof Array || args.length > 1)) {
            data = data[0];
        }
        return this
            .request('', data)
            .then(data => {
            return this.mapResponse(data);
        })
            .then((data) => data)
            .catch((e) => {
            if (e.isAxiosError) {
                if (e && e.response && e.response.data) {
                    const err = this.mapResponse(e.response.data);
                    if (err instanceof Error) {
                        throw err;
                    }
                    return err;
                }
            }
            throw e;
        });
    }
    reduceParams(params) {
        for (const args of this.permanentArguments) {
            if (params instanceof Array) {
                params = params.concat(args);
            }
            else if (typeof params === 'object' && args.constructor.name === 'Object') {
                for (let k in args) {
                    // noinspection JSUnfilteredForInLoop
                    params[k] = args[k];
                }
            }
        }
        return params;
    }
    addPermanentArgument(params) {
        if (params instanceof Array) {
            this.permanentArguments = this.permanentArguments.concat(params);
        }
        else {
            this.permanentArguments.push(params);
        }
        return this;
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,